generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DB_URL")
  directUrl = env("SB_CONNECT")
  schemas   = ["ctrl-Y"]
}

model Task {
  task_id    Int         @id @default(autoincrement())
  t_name     String
  memo       String?
  reward     Int            @db.SmallInt
  deadline   DateTime       @db.Timestamptz(6)
  s_id       Int            @db.SmallInt
  parent_id  String?        @default(dbgenerated("auth.uid()")) @db.Uuid
  status     TaskStatusCode @default(TODO)
  updated_at DateTime       @updatedAt @db.Timestamptz(6)
  child_id   String?        @db.Uuid @default(uuid())
  childTasks ChildTask[]
  child_acc  Child?         @relation(fields: [child_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  parent     User?          @relation(fields: [parent_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  taskStatus TaskStatus     @relation(fields: [s_id], references: [s_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("tasks")
  @@schema("ctrl-Y")
}

model User {
  user_id       String   @id @default(uuid()) @db.Uuid
  email         String   @unique
  password      String
  keyword       String
  cutoff_day    Boolean
  pay_day       Boolean
  registered_at DateTime @db.Timestamptz(6)
  updated_at    DateTime @updatedAt @db.Timestamptz(6)
  subscription  Json?
  children      Child[]
  tasks         Task[]

  @@map("parent_acc")
  @@schema("ctrl-Y")
}

model Child {
  user_id       String      @id @default(uuid()) @db.Uuid
  parent_id     String      @default(uuid()) @db.Uuid
  c_name        String
  icon_path     String?
  registered_at DateTime    @db.Timestamptz(6)
  updated_at    DateTime    @updatedAt @db.Timestamptz(6)
  parent        User        @relation(fields: [parent_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  childTasks    ChildTask[]
  payroll       Pay[]
  tasks         Task[]

  @@map("child_acc")
  @@schema("ctrl-Y")
}

model ChildTask {
  task_id Int
  user_id String @default(uuid()) @db.Uuid
  task    Task   @relation(fields: [task_id], references: [task_id], onDelete: NoAction, onUpdate: NoAction)
  child   Child  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([task_id, user_id])
  @@map("child_tasks")
  @@schema("ctrl-Y")
}

model Pay {
  user_id        String   @db.Uuid
  inserted_month DateTime @db.Date
  number         Int      @db.SmallInt
  reward         Int      @db.SmallInt
  child_acc      Child    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, inserted_month])
  @@unique([user_id, inserted_month], name: "user_id_inserted_month")
  @@map("payroll")
  @@schema("ctrl-Y")
}

model TaskStatus {
  s_id   Int    @id @default(autoincrement()) @db.SmallInt
  s_name String @unique
  tasks  Task[]

  @@map("task_status")
  @@schema("ctrl-Y")
}

enum TaskStatusCode {
  TODO
  IN_PROGRESS
  WAIT_REVIEW
  DONE

  @@schema("ctrl-Y")
}
